<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTML解析大法</title>
    <url>/2022/01/17/HTML%E8%A7%A3%E6%9E%90%E5%A4%A7%E6%B3%95/</url>
    <content><![CDATA[<h1 id="HTML解析大法："><a href="#HTML解析大法：" class="headerlink" title="HTML解析大法："></a>HTML解析大法：</h1><h2 id="一-正则表达式"><a href="#一-正则表达式" class="headerlink" title="一.正则表达式"></a>一.正则表达式</h2><h3 id="1-模块主要函数"><a href="#1-模块主要函数" class="headerlink" title="1.模块主要函数"></a>1.模块主要函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-comment">#创建正则表达式对象</span><br>re.<span class="hljs-built_in">compile</span>(pattern)<br><span class="hljs-comment">#在字符串中寻找模式，返回match对象或None</span><br>re.search(pattern,string)<br><span class="hljs-comment">#从字符串开头匹配，返回match或None</span><br>re.match(pattern,string)<br><span class="hljs-comment">#返回列表</span><br>re.findall(pattern,string)<br></code></pre></td></tr></table></figure>

<h3 id="2-使用正则表达式对象"><a href="#2-使用正则表达式对象" class="headerlink" title="2.使用正则表达式对象"></a>2.使用正则表达式对象</h3><p>使用<code>re.compile</code>将正则表达式编译成正则表达式对象，即可使用对象的方法（与上文search、match、findall用法大同小异）</p>
<h3 id="3-子模式与Match对象"><a href="#3-子模式与Match对象" class="headerlink" title="3.子模式与Match对象"></a>3.子模式与Match对象</h3><p>Match对象主要方法有**group()<strong>（返回模式子内容），</strong>groups()<strong>（返回模式字内容元组），</strong>groupdict()**（返回字典）</p>
<p><strong>特别地，使用(?P&lt;name&gt;)可以为子模式命名</strong></p>
<h2 id="二-BeautifulSoup"><a href="#二-BeautifulSoup" class="headerlink" title="二.BeautifulSoup"></a>二.BeautifulSoup</h2><h3 id="1-对象种类"><a href="#1-对象种类" class="headerlink" title="1.对象种类"></a>1.对象种类</h3><h4 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h4><p>即HTML中尖括号扩起来的部分。其有两个重要的属性：<strong>name</strong>和<strong>attributes</strong><br><strong>name</strong>属性：<br>每个Tag的名字，包括<strong>title、a、h1</strong>等等。<strong>name</strong>属性可以被修改。<br> <strong>attributes</strong>属性：<br>每个Tag中包含等号，等号两边的内容（像字典一样）就是是attribute，可以使用类似python操作字典的方法操作属性，建议使用get。</p>
<h4 id="②NavigableString"><a href="#②NavigableString" class="headerlink" title="②NavigableString"></a>②NavigableString</h4><p>对Tag对象使用.<strong>string</strong>获得其中文字<br>####③BeautifulSoup<br>与Tag对象类似，只不过可以把<strong>BeautifulSoup</strong>对象看成整体的Tag</p>
<h4 id="④comment"><a href="#④comment" class="headerlink" title="④comment"></a>④comment</h4><p>即HTML中的注释部分。在使用.<strong>string</strong>时会同时提取注释，所以使用时可以先判断类型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(soup.a.string) == bs4.element.comment:<br>    <span class="hljs-built_in">print</span>(soupa.a.string)<br></code></pre></td></tr></table></figure>

<h3 id="2-BeautifulSoup的树结构"><a href="#2-BeautifulSoup的树结构" class="headerlink" title="2.BeautifulSoup的树结构"></a>2.BeautifulSoup的树结构</h3><h4 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h4><p>.<strong>content</strong>以及.<strong>children</strong>都可返回直接子节点，不同的是前者返回的是列表。<br>.<strong>descendants</strong>可以返回所有的子孙节点（返回的是可迭代对象）。</p>
<h4 id="父节点"><a href="#父节点" class="headerlink" title="父节点"></a>父节点</h4><p>.<strong>parents</strong>返回父节点的可迭代对象。</p>
<h4 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h4><p>.<strong>next_sibling</strong>和.<strong>previous_sibing</strong>返回前一个和后一个兄弟节点。</p>
<h3 id="find-all方法"><a href="#find-all方法" class="headerlink" title="find_all方法"></a>find_all方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">find_all(name, attrs, recursive, text, **kwarg)<br></code></pre></td></tr></table></figure>
<h4 id="name参数："><a href="#name参数：" class="headerlink" title="name参数："></a>name参数：</h4><p>寻找名字为name的标记</p>
<h4 id="kwargs"><a href="#kwargs" class="headerlink" title="kwargs"></a>kwargs</h4><p>查找参数符合条件的标记<br>例如：<code>find_all(&#39;a&#39;,class_=&#39;post-title&#39;)</code>寻找参数class为post-title的标记</p>
<h4 id="text"><a href="#text" class="headerlink" title="text"></a>text</h4><p>搜索文档中的字符串内容。</p>
<h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><p>限制搜索结果的个数。</p>
<h4 id="recursive"><a href="#recursive" class="headerlink" title="recursive"></a>recursive</h4><p>默认为true，若为false，则只寻找当前节点的直接子节点。</p>
<h2 id="三-lxml的xpath解析"><a href="#三-lxml的xpath解析" class="headerlink" title="三.lxml的xpath解析"></a>三.lxml的xpath解析</h2><p>lxml库的使用方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">rest = etree.HTML(html)<br></code></pre></td></tr></table></figure>
<h3 id="XPath节点"><a href="#XPath节点" class="headerlink" title="XPath节点"></a>XPath节点</h3><p>XPath的节点关系类似BeautifulSoup，都是树的结构，此处不再赘述。</p>
<h3 id="XPath语法"><a href="#XPath语法" class="headerlink" title="XPath语法"></a>XPath语法</h3><table>
<thead>
<tr>
<th>表达式</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td>nodename</td>
<td align="center">选取此节点的所有子节点</td>
</tr>
<tr>
<td>/</td>
<td align="center">从根节点选取</td>
</tr>
<tr>
<td>//</td>
<td align="center">选择任意位置的某个节点</td>
</tr>
<tr>
<td>.</td>
<td align="center">选取当前节点</td>
</tr>
<tr>
<td>..</td>
<td align="center">选取当前节点的父节点</td>
</tr>
<tr>
<td>@</td>
<td align="center">选取</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>谓语</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td>/classroom/student[1]</td>
<td align="center">选取classroom子元素的第一个student元素</td>
</tr>
<tr>
<td>/classroom/student[last()]</td>
<td align="center">选取classroom子元素中的最后一个student元素</td>
</tr>
<tr>
<td>/classroom/student[position()&lt;6]</td>
<td align="center">选取classroom子元素的前五个元素</td>
</tr>
<tr>
<td>//name[@lang]</td>
<td align="center">选取name元素，其必须有lang属性</td>
</tr>
<tr>
<td>//name[@lang=’en’]</td>
<td align="center">选取name元素，其lang属性的值必须为en</td>
</tr>
<tr>
<td>//student[age&gt;20]</td>
<td align="center">选取所有student，其age属性必须大于20</td>
</tr>
</tbody></table>
<p>除此之外Xpath还可以在表达式中使用/text()来提取其中的字符（类似bs的.string）<br>Selector对象还有extract()方法，获取其中的文字。</p>
<p>###偷懒小技巧<br>在浏览器的审查元素中可以右键对元素的XPath进行复制（仅适用于提取单个元素的情况）</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/01/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
